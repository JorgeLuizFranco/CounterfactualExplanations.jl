---
format: 
  commonmark:
    variant: -raw_html
    wrap: none
    self-contained: true
crossref:
  fig-prefix: Figure
  tbl-prefix: Table
bibliography: https://raw.githubusercontent.com/pat-alt/bib/main/bib.bib
output: asis
execute: 
  eval: false
  echo: true
jupyter: julia-1.7
---

```@meta
CurrentModule = CounterfactualExplanations 
```

## Variational Autoencoder

### Synthetic data

```{julia}
input_dim = 3
n = 100
η = 10
μ₀ = rand(-input_dim:input_dim,input_dim) .* η
μ₁ = rand(-input_dim:input_dim,input_dim) .* η
X₀ = μ₀ .+ randn(input_dim, n) 
X₁ = μ₁ .+ randn(input_dim, n) 
X = hcat(X₀, X₁)
ys = hcat(zeros(1,n), ones(1,n))
```

```{julia}
using CounterfactualExplanations.GenerativeModels: VAE, train!, reconstruct, plot
vae = VAE(input_dim; epochs=100)
train!(vae, X, ys)
```

```{julia}
plot(vae, X, ys)
```



### MNIST data

```{julia}
#| echo: false
using CounterfactualExplanations, Plots, MLDatasets
using MLDatasets: convert2image
using BSON: @save, @load
theme(:wong)
include("dev/utils.jl") # some plotting functions
www_path = "docs/src/generators/www"
```

```{julia}
#| echo: false
data_train = MNIST(:train)
train_x, train_y = data_train[:]
input_dim = prod(size(train_x[:,:,1]))
using Images, Random, StatsBase
Random.seed!(1)
n_samples = 10
samples = train_x[:,:,sample(1:end, n_samples, replace=false)]
mosaic = mosaicview([convert2image(MNIST, samples[:,:,i]) for i ∈ 1:n_samples]...,ncol=Int(n_samples/2))
plt = plot(mosaic, size=(500,260), axis=nothing, background=:transparent)
savefig(plt, joinpath(www_path, "mnist_samples.png"))
```

```{julia}
using Flux
using CounterfactualExplanations.Data: mnist_data
X, ys = mnist_data()
```

```{julia}
using CounterfactualExplanations.GenerativeModels: VAE, train!
vae = VAE(input_dim)
train!(vae, X, ys)
```

```{julia}
using CounterfactualExplanations.GenerativeModels
plt = GenerativeModels.plot(vae, X, ys)
savefig(plt, joinpath(www_path, "vae_output.png"))
```
