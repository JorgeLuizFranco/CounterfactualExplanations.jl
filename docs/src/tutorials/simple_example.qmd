```@meta
CurrentModule = CounterfactualExplanations 
```

```{julia}
#| echo: false
include("$(pwd())/docs/setup_docs.jl")
eval(setup_docs)
```

# Simple Example

In this tutorial, we will go through a simple example involving synthetic data and a generic counterfactual generator.

## Data and Classifier

Below we generate some linearly separable data and fit a simple MLP classifier with batch normalization to it. 
The fit_model function takes an object of type CounterfactualData and a symbol representing a model in the model_catalogue

```{julia}
# Counteractual data and model:
flux_training_params.batchsize = 10
counterfactual_data = load_overlapping()
M = fit_model(counterfactual_data, :MLP, batch_norm=true)
```

## Counterfactual Search

Next, determine a target and factual class for our counterfactual search and select a random factual instance to explain.

```{julia}
target = 2
factual = 1
chosen = rand(findall(predict_label(M, counterfactual_data) .== factual))
x = select_factual(counterfactual_data, chosen)
```

Finally, we generate and visualize the generated counterfactual:
The generate_counterfactual function takes the following arguments: 
    x::AbstractArray,
    target::RawTargetType,
    data::CounterfactualData,
    M::Models.AbstractFittedModel,
    generator::AbstractGenerator

```{julia}
#| output: true

# Search:
generator = WachterGenerator()
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
plot(ce)
```
