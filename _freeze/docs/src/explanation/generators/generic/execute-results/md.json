{
  "hash": "fef725cceba1e1cd746bcd39526c2c59",
  "result": {
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# `GenericGenerator`\n\nWe use the term **generic** to relate to the counterfactual generator proposed by @wachter2017counterfactual. \n\n## Description\n\nAs the term indicates, this approach is simple: it forms the baseline approach for gradient-based counterfactual generators. @wachter2017counterfactual were among the first to realise that \n\n> [...] explanations can, in principle, be offered without opening the “black box.”\n>\n> --- @wachter2017counterfactual\n\nGradient descent is performed directly in the feature space. Concerning the cost heuristic, the authors choose to penalize the distance of counterfactuals from the factual value. This is based on the intuitive notion that larger feature perturbations require greater effort.\n\n## Usage\n\nThe approach can be used in our package as follows:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ngenerator = GenericGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\nplot(ce)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n![](generic_files/figure-commonmark/cell-3-output-1.svg){}\n:::\n:::\n\n\n## References\n\n",
    "supporting": [
      "generic_files"
    ],
    "filters": []
  }
}