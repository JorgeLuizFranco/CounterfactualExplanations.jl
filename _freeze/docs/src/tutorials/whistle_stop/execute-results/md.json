{
  "hash": "0243e9d103a4f0c7e37ec569854fc5d2",
  "result": {
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# Whistle-Stop Tour\n\nIn this tutorial, we will go through a simple example involving synthetic data. We will generate Counterfactual Explanations using different generators and visualize the results.\n\n## Data and Classifier\n\n\n\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ncounterfactual_data = load_blobs(n_samples; k=n_dim, centers=n_classes)\nM = fit_model(counterfactual_data, model_name)\n```\n:::\n\n\nThe chart below visualizes our data along with the model predictions. In particular, the contour indicates the predicted probabilities generated by our classifier. By default, these are the predicted probabilities for $y=1$, the first label. For multi-dimensional input data is compressed into two dimensions and the decision boundary is approximated using Nearest Neighbors (this is still somewhat experimental). \n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nplot(M, counterfactual_data)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](whistle_stop_files/figure-commonmark/cell-6-output-1.svg){}\n:::\n:::\n\n\n## Counterfactual Explanation\n\nNext, we begin by specifying our target and factual label. We then draw a random sample from the non-target (factual) class.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n# Factual and target:\ntarget = 2\nfactual = 4\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual))\nx = select_factual(counterfactual_data,chosen)\n```\n:::\n\n\n\n\nCounterfactual generators accept several default parameters that can be used to adjust the counterfactual search at a high level: for example, a `Flux.jl` optimizer can be supplied to define how exactly gradient steps are performed. Importantly, one can also define the threshold probability at which the counterfactual search will converge. This relates to the probability predicted by the underlying black-box model, that the counterfactual belongs to the target class. A higher decision threshold typically prolongs the counterfactual search.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n# Search params:\nopt = Descent()\ndecision_threshold = 0.75\nnum_counterfactuals = 3\n```\n:::\n\n\nThe code below runs the counterfactual search for each generator available in the `generator_catalogue`. In each case, we also call the generic `plot()` method on the generated instance of type `CounterfactualExplanation`. This generates a simple plot that visualizes the entire counterfactual path. The chart below shows the results for all counterfactual generators. \n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nces = Dict()\nplts = []\n# Search:\nfor (key, Generator) in generator_catalogue\n    generator = Generator(; \n        opt=opt, \n        decision_threshold=decision_threshold\n    )\n    ce = generate_counterfactual(\n        x, target, counterfactual_data, M, generator;\n        num_counterfactuals = num_counterfactuals\n    )\n    ces[key] = ce\n    plts = [plts..., plot(ce; title=key, colorbar=false)]\nend\n```\n:::\n\n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=11}\n![](whistle_stop_files/figure-commonmark/cell-11-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "whistle_stop_files"
    ],
    "filters": []
  }
}