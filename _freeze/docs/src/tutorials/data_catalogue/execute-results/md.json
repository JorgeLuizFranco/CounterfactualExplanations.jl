{
  "hash": "01c9ef18b6dfb13782c06a82e0d18fd4",
  "result": {
    "markdown": "```@meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n# Data Catalogue\n\nTo allow researchers and practitioners to test and compare counterfactual generators, the package ships with pre-processed synthetic and real-world benchmark datasets from different domains.\n\n## Synthetic Data\n\nThe following dictionary can be used to inspect the available methods to generate synthetic datasets where the `key` indicates the name of the data and the `value` is the corresponding method:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\ndata_catalogue[:synthetic]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nDict{Symbol, Function} with 6 entries:\n  :overlapping        => load_overlapping\n  :linearly_separable => load_linearly_separable\n  :blobs              => load_blobs\n  :moons              => load_moons\n  :circles            => load_circles\n  :multi_class        => load_multi_class\n```\n:::\n:::\n\n\nThe chart below shows the generated data using default parameters:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nplts = []\n_height = 200\n_n = length(keys(data_catalogue[:synthetic]))\nfor (key, fun) in data_catalogue[:synthetic]\n    counterfactual_data = fun()\n    plt = plot()\n    scatter!(counterfactual_data, title=key)\n    plts = [plts..., plt]\nend\nplot(plts..., size=(_n * _height, _height), layout=(1, _n))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](data_catalogue_files/figure-commonmark/cell-4-output-1.svg){}\n:::\n:::\n\n\n## Real-World Data\n\nAs for real-world data, the same dictionary can be used to inspect the available data from different domains. \n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ndata_catalogue[:tabular]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nDict{Symbol, Function} with 3 entries:\n  :california_housing => load_california_housing\n  :credit_default     => load_credit_default\n  :gmsc               => load_gmsc\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ndata_catalogue[:vision]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nDict{Symbol, typeof(load_mnist)} with 1 entry:\n  :mnist => load_mnist\n```\n:::\n:::\n\n\n",
    "supporting": [
      "data_catalogue_files"
    ],
    "filters": []
  }
}