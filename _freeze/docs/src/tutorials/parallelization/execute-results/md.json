{
  "hash": "6c1e541e607f5009fe5a4997a0fc0fb1",
  "result": {
    "markdown": "---\nexecute:\n  output: true\ntitle: Parallelization\n---\n\n\n\n\n``` @meta\nCurrentModule = CounterfactualExplanations \n```\n\n\n\n\nVersion `0.1.15` adds support for parallelization through multi-processing. Currently, the only available backend for parallelization is [MPI.jl](https://juliaparallel.org/MPI.jl/latest/). \n\n## Available functions\n\nParallelization is only available for certain functions. To check if a function is parallelizable, you can use  `parallelizable` function:\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.Evaluation: evaluate, benchmark\nprintln(parallelizable(generate_counterfactual))\nprintln(parallelizable(evaluate))\nprintln(parallelizable(predict_label))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrue\ntrue\nfalse\n```\n:::\n:::\n\n\nIn the following, we will generate multiple counterfactuals and evaluate them in parallel:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing CounterfactualExplanations.Parallelization\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual), 10)\nxs = select_factual(counterfactual_data, chosen)\n```\n:::\n\n\n## MPI\n\n\n```{=commonmark}\n!!! note\n    To use MPI, you need to have MPI installed on your machine. Running the following code straight from a running Julia session will work if you have MPI installed on your machine, but it will be run on a single process. To run the code in parallel, you need to run it from the command line with `mpirun` or `mpiexec`. For example, to run the code on 4 processes, you can run the following command from the command line. For more information, see [MPI.jl](https://juliaparallel.org/MPI.jl/latest/). \n```\n\n\nWe first instantiate an `MPIParallelizer` object:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nparallelizer = MPIParallelizer()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nMPIParallelizer()\n```\n:::\n:::\n\n\nTo generate counterfactuals in parallel, we use the `parallelize` function:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nces = parallelize(\n    parallelizer,\n    generate_counterfactual,\n    xs,\n    target,\n    counterfactual_data,\n    M,\n    generator\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: Using `MPI.jl` for multi-processing.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n10-element Vector{CounterfactualExplanation}:\n CounterfactualExplanation\nConvergence: ✅ after 7 steps.\n CounterfactualExplanation\nConvergence: ✅ after 7 steps.\n CounterfactualExplanation\nConvergence: ✅ after 8 steps.\n CounterfactualExplanation\nConvergence: ✅ after 6 steps.\n CounterfactualExplanation\nConvergence: ✅ after 6 steps.\n CounterfactualExplanation\nConvergence: ✅ after 9 steps.\n CounterfactualExplanation\nConvergence: ✅ after 8 steps.\n CounterfactualExplanation\nConvergence: ✅ after 8 steps.\n CounterfactualExplanation\nConvergence: ✅ after 7 steps.\n CounterfactualExplanation\nConvergence: ✅ after 7 steps.\n```\n:::\n:::\n\n\nTo evaluate counterfactuals in parallel, we again use the `parallelize` function:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nparallelize(\n    parallelizer,\n    evaluate,\n    ces;\n    report_meta = true\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: Using `MPI.jl` for multi-processing.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n\\begin{tabular}{r|cccccc}\n\t& sample & num\\_counterfactual & variable & value & generator & \\\\\n\t\\hline\n\t& Int64 & Int64 & String & Float64 & Symbol & \\\\\n\t\\hline\n\t1 & 1 & 1 & distance & 2.97505 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t2 & 1 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t3 & 1 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t4 & 2 & 1 & distance & 3.16876 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t5 & 2 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t6 & 2 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t7 & 3 & 1 & distance & 3.51636 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t8 & 3 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t9 & 3 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t10 & 4 & 1 & distance & 2.62286 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t11 & 4 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t12 & 4 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t13 & 5 & 1 & distance & 2.75836 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t14 & 5 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t15 & 5 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t16 & 6 & 1 & distance & 3.94739 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t17 & 6 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t18 & 6 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t19 & 7 & 1 & distance & 3.46058 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t20 & 7 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t21 & 7 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t22 & 8 & 1 & distance & 3.743 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t23 & 8 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t24 & 8 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t25 & 9 & 1 & distance & 3.03189 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t26 & 9 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t27 & 9 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t28 & 10 & 1 & distance & 3.05924 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t29 & 10 & 1 & redundancy & 0.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\t30 & 10 & 1 & validity & 1.0 & GradientBasedGenerator(nothing, CounterfactualExplanations.Objectives.distance\\_l1, 0.1, false, Descent(0.1)) & $\\dots$ \\\\\n\\end{tabular}\n\n:::\n:::\n\n\nBenchmarks can also be run with parallelization by specifying `parallelizer` argument:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n# Models:\nbmk = benchmark(counterfactual_data; parallelizer = parallelizer)\n```\n:::\n\n\n",
    "supporting": [
      "parallelization_files"
    ],
    "filters": []
  }
}