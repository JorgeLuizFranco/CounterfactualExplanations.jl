{
  "hash": "d227f8771bcd8232a4a8529534702941",
  "result": {
    "markdown": "\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# Counteractual data and model:\ncounterfactual_data = load_linearly_separable()\nM = fit_model(counterfactual_data, :Linear)\ntarget = 2\nfactual = 1\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual))\nx = select_factual(counterfactual_data, chosen)\n\n# Search:\ngenerator = GenericGenerator()\nce = generate_counterfactual(x, target, counterfactual_data, M, generator)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\ncounterfactual_data_large = load_linearly_separable(100000)\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n@time generate_counterfactual(x, target, counterfactual_data, M, generator)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n@time generate_counterfactual(x, target, counterfactual_data_large, M, generator)\n```\n:::\n\n\n",
    "supporting": [
      "performance_files"
    ],
    "filters": []
  }
}