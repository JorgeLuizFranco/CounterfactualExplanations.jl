# Vision Data and Models

```{julia}
#| echo: false

include("dev/artifacts/setup.jl")
eval(setup)
www_path = www_dir("vision")
data_path = data_dir("vision")
model_path = model_dir("vision")
www_name = "www-vision"
data_name = "data-vision"
model_name = "model-vision"
```

## MNIST 

```{julia}
counterfactual_data = load_mnist()
input_dim, n_obs = size(counterfactual_data.X)
```

### Classifiers

```{julia}
flux_training_params.batchsize = Int(round(n_obs/10))
flux_training_params.verbose = true
M = fit_model(counterfactual_data, :MLP, n_hidden=32)
M_ens = fit_model(counterfactual_data, :DeepEnsemble, n_hidden=32)
CounterfactualExplanations.reset!(flux_training_params)
```

```{julia}
test_data = load_mnist_test()
println("MLP test score (F1): $(model_evaluation(M, test_data))")
println("Deep Ensemble test score (F1): $(model_evaluation(M_ens, test_data))")
```

```{julia}
Serialization.serialize(joinpath(model_path,"mnist_mlp.jls"),M)
Serialization.serialize(joinpath(model_path,"mnist_ensemble.jls"),M_ens)
```

### Generative Model

```{julia}
using CounterfactualExplanations.GenerativeModels: VAE, train!
vae = VAE(input_dim; nll=Flux.Losses.mse, epochs=100, λ=0.0001, latent_dim=28, hidden_dim=50)
X = counterfactual_data.X
y = counterfactual_data.output_encoder.y        # raw output vector
flux_training_params.verbose = true
train!(vae, X, y)
Serialization.serialize(joinpath(model_path,"mnist_vae_strong.jls"),vae)
```

```{julia}
using CounterfactualExplanations.GenerativeModels: reconstruct
images = []
rec_images = []
for i in 0:9
    j = 0
    while j < 10
        x = X[:,rand(findall(y .== i))]
        x̂ = reconstruct(vae, x)[1] |> 
            x̂ -> clamp.((x̂ .+ 1.0) ./ 2.0, 0.0, 1.0) |>
            x̂ -> reshape(x̂, 28,28) |>
            x̂ -> convert2image(MNIST, x̂)
        x = clamp.((x .+ 1.0) ./ 2.0, 0.0, 1.0) |> 
            x -> reshape(x, 28,28) |>
            x -> convert2image(MNIST, x)
        push!(images, x)
        push!(rec_images, x̂)
        j += 1
    end
end
p1 = plot(mosaic(images..., ncol=10), title="Images")
p2 = plot(mosaic(rec_images..., ncol=10), title="Reconstructions")
plot(p1, p2, axis=false, size=(800,375))
```

```{julia}
vae = VAE(input_dim; nll=Flux.Losses.mse, epochs=100, λ=0.05, latent_dim=2, hidden_dim=10)
flux_training_params.verbose = true
train!(vae, X, y)
Serialization.serialize(joinpath(model_path,"mnist_vae_weak.jls"),vae)
```

```{julia}
using CounterfactualExplanations.GenerativeModels: reconstruct
images = []
rec_images = []
for i in 0:9
    j = 0
    while j < 10
        x = X[:,rand(findall(y .== i))]
        x̂ = reconstruct(vae, x)[1] |> 
            x̂ -> clamp.((x̂ .+ 1.0) ./ 2.0, 0.0, 1.0) |>
            x̂ -> reshape(x̂, 28,28) |>
            x̂ -> convert2image(MNIST, x̂)
        x = clamp.((x .+ 1.0) ./ 2.0, 0.0, 1.0) |> 
            x -> reshape(x, 28,28) |>
            x -> convert2image(MNIST, x)
        push!(images, x)
        push!(rec_images, x̂)
        j += 1
    end
end
p1 = plot(mosaic(images..., ncol=10), title="Images")
p2 = plot(mosaic(rec_images..., ncol=10), title="Reconstructions")
plot(p1, p2, axis=false, size=(800,375))
```

## Generate Artifacts

```{julia}
generate_artifacts(model_path; artifact_name=model_name)
```

