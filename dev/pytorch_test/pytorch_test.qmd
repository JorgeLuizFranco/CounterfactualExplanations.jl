# Notebook for testing the pytorch model
```{julia}
using Revise
```
### Set up
```{julia}
# Don't use CONDA
ENV["JULIA_CONDAPKG_BACKEND"] = "Null"

# Dependencies
using Pkg
Pkg.activate("$(pwd())/dev/pytorch_test")

using PythonCall
using CounterfactualExplanations
```

# Load data
```{julia}
using Random
# Some random data:
Random.seed!(1234);
N = 100

@info "Generating data..."
counterfactual_data = CounterfactualExplanations.Data.load_blobs(N)

x = counterfactual_data.X
y = counterfactual_data.y

x = PyArray(x)
y = PyArray(y)

@info "Data generated."
```

# Separate x and y data
```{julia}
torch = pyimport("torch")
np = pyimport("numpy")

x = counterfactual_data.X
x = np.array(x)
x = torch.Tensor(x).T

y = counterfactual_data.y
y = np.array(y)
y = torch.Tensor(y)
```

# Define model
```{julia}
MLP = PythonCall.pytype("MLP", (torch.nn.Module,), [
    "__module__" => "__main__",

    pyfunc(
        name = "__init__",
        function(self)
            torch.nn.Module.__init__(self)
            self.model = torch.nn.Sequential(
                torch.nn.Flatten(),
                torch.nn.Linear(2, 32),
                torch.nn.Sigmoid(),
                torch.nn.Linear(32, 2)
            )
            return
        end
    ),

    pyfunc(
        name = "forward",
        function(self, x)
            return self.model(x)
        end
    )
])
```

# Declare model, optimizer and loss function
```{julia}
@info "Training"
model = MLP()
optimizer = torch.optim.Adam(model.parameters(), lr=0.1)
loss_fun = torch.nn.BCEWithLogitsLoss()
```

# Training
```{julia}
for epoch in 1:100
  # Compute prediction and loss:
  output = model(x).squeeze()
  loss = loss_fun(output, y.t())
  
  # Backpropagation:
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()
  println("Loss at epoch $epoch: $(loss.item())")
end
```

# Declare MyPyTorchModel
```{julia}
using Flux
using CounterfactualExplanations, CounterfactualExplanations.Models
import CounterfactualExplanations.Models: logits, probs

struct MyPyTorchModel <: AbstractDifferentiableModel
    nn::Any
    likelihood::Symbol
end

function logits(M::MyPyTorchModel, X::AbstractArray)    
    if !isa(X, Matrix)
      X = reshape(X, length(X), 1)
    end

    ŷ_python = M.nn(torch.Tensor(np.array(X)).T).detach().numpy()
    ŷ = pyconvert(Matrix, ŷ_python)

    return transpose(ŷ)
end

function probs(M::MyPyTorchModel, X::AbstractArray)
    if M.likelihood == :classification_binary
        return σ.(logits(M, X))
    elseif M.likelihood == :classification_multi
        return softmax(logits(M, X))
    end
end

M = MyPyTorchModel(model, :classification_multi)
```

# Declare ∂ℓ
```{julia}
import CounterfactualExplanations.Generators: ∂ℓ
using LinearAlgebra

# Countefactual loss:
function ∂ℓ(generator::AbstractGradientBasedGenerator, M::MyPyTorchModel, counterfactual_state::CounterfactualExplanation)
    nn = M.nn
    x′ = counterfactual_state.x
    target = counterfactual_state.target
    x = reshape(x′, 1, length(x′))

    x = np.array(x)
    x = torch.Tensor(x)
    x.requires_grad = true

    target = torch.Tensor([target])
    println(target)

    output = nn(x).squeeze()

    obj_loss = loss_fun(output, target)

    obj_loss.backward()

    grad = pyconvert(Matrix, x.grad.t().detach().numpy())

    return grad
end
```

# Select random factual
```{julia}
Random.seed!(420)

target = 1
factual = 2

@info "Choose factual's index"
y_chosen_factual_idx = rand(findall(predict_label(M, counterfactual_data) .== factual))

@info "Select factual"
x_random_factual = select_factual(counterfactual_data, y_chosen_factual_idx)

println(target)
```

# Generate counterfactual
```{julia}
# Define a generator:
generator = GenericGenerator()

# Generate a recourse:
counterfactual = generate_counterfactual(
    x_random_factual, 
    target, 
    counterfactual_data, 
    M, 
    generator;
    max_iter=1000
)
```

# Plot
```{julia}
#| echo: false
T = total_steps(counterfactual)
X_path = reduce(hcat,path(counterfactual))
ŷ = target_probs(counterfactual, X_path)
p1 = CounterfactualExplanations.plot(counterfactual)
# Now we can use animate_path

# anim = @animateounter for t in 1:T
#     scatter!(p1, [path(counterfactual)[t][1]], [path(counterfactual)[t][2]], ms=5, color=Int(y), label="")
#     p2 = plot(1:t, ŷ[1:t], xlim=(0,T), ylim=(0, 1), label="p(y′=" * string(target) * ")", title="Validity", lc=:black)
#     Plots.abline!(p2,0,counterfactual.params[:γ],label="threshold γ", ls=:dash) # decision boundary
#     plot(p1,p2,size=(800,400))
# end
# gif(anim, joinpath(www_path, "interop_py.gif"), fps=5)
```
